AWSTemplateFormatVersion: 2010-09-09
Description: Provider VPC, EC2 Instances, and VPC Lattice services
Transform: 'AWS::LanguageExtensions'

Parameters:
  Service2CustomDomainName:
    Type: String
    Description: Custom domain name for VPC Lattice service 2.
  Service2CertificateArn:
    Type: String
    Description: Certificate ARN for VPC Lattice service 2.
  ServiceNetworkId:
    Type: String
    Description: VPC Lattice service network ID.
  HostedZoneName:
    Type: String
    Description: Private Hosted Zone name - used for DNS resolution for VPC Lattice service 2 (custom domain name)
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

Mappings:
  SubnetToIndex:
    Workloada:
      Index: 0
    Workloadb:
      Index: 1
    Endpointsa:
      Index: 2
    Endpointsb:
      Index: 3
  Protocol:
    HTTP:
      Port: 80
    HTTPS:
      Port: 443

Resources:
  # ---------- VPC LATTICE SERVICE 1 ----------
  VpcLatticeService1:
    Type: AWS::VpcLattice::Service
    Properties:
      Name: !Sub service1-${AWS::StackName}
      AuthType: NONE
  
  VpcLatticeService1ServiceAssociation:
    Type: AWS::VpcLattice::ServiceNetworkServiceAssociation
    Properties:
      ServiceIdentifier: !Ref VpcLatticeService1
      ServiceNetworkIdentifier: !Ref ServiceNetworkId
  
  VpcLatticeService1HTTPSListener:
    Type: AWS::VpcLattice::Listener
    Properties:
      Name: https-service1-listener
      ServiceIdentifier: !Ref VpcLatticeService1
      Port: 443
      Protocol: HTTPS
      DefaultAction: 
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref VpcLatticeTargetGroup1
              Weight: 100

  VpcLatticeTargetGroup1:
    Type: AWS::VpcLattice::TargetGroup
    Properties:
      Name: target-instance
      Type: INSTANCE
      Config: 
        Port: 80
        Protocol: HTTP
        ProtocolVersion: HTTP1
        VpcIdentifier: !Ref VPC
        HealthCheck:
          Enabled: true 
      Targets: 
        - Id: !Ref Instancea
          Port: 80
        - Id: !Ref Instanceb
          Port: 80

  # ---------- VPC LATTICE SERVICE 2 ----------
  VpcLatticeService2:
    Type: AWS::VpcLattice::Service
    Properties:
      Name: !Sub service2-${AWS::StackName}
      AuthType: NONE
      CertificateArn: !Ref Service2CertificateArn
      CustomDomainName: !Ref Service2CustomDomainName
  
  VpcLatticeService2ServiceAssociation:
    Type: AWS::VpcLattice::ServiceNetworkServiceAssociation
    Properties:
      ServiceIdentifier: !Ref VpcLatticeService2
      ServiceNetworkIdentifier: !Ref ServiceNetworkId

  VpcLatticeService2HTTPSListener:
    Type: AWS::VpcLattice::Listener
    Properties:
      Name: https-service2-listener
      ServiceIdentifier: !Ref VpcLatticeService2
      Port: 443
      Protocol: HTTPS
      DefaultAction: 
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref VpcLatticeTargetGroup2IPv4
              Weight: 50
            - TargetGroupIdentifier: !Ref VpcLatticeTargetGroup2IPv6
              Weight: 50

  VpcLatticeTargetGroup2IPv4:
    Type: AWS::VpcLattice::TargetGroup
    Properties:
      Name: target-ipv4
      Type: IP
      Config: 
        IpAddressType: IPV4
        Port: 80
        Protocol: HTTP
        ProtocolVersion: HTTP1
        VpcIdentifier: !Ref VPC
        HealthCheck:
          Enabled: true 
      Targets: 
        - Id: !GetAtt Instancea.PrivateIp
          Port: 80
        - Id: !GetAtt Instanceb.PrivateIp
          Port: 80
  
  VpcLatticeTargetGroup2IPv6:
    Type: AWS::VpcLattice::TargetGroup
    Properties:
      Name: target-ipv6
      Type: IP
      Config: 
        IpAddressType: IPV6
        Port: 80
        Protocol: HTTP
        ProtocolVersion: HTTP1
        VpcIdentifier: !Ref VPC
        HealthCheck:
          Enabled: true 
      Targets: 
        - Id: !GetAtt EC2IPv6AddressInstancea.IPv6Address
          Port: 80
        - Id: !GetAtt EC2IPv6AddressInstanceb.IPv6Address
          Port: 80

  # ---------- VPC ----------
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - provider-vpc
              - !Ref AWS::StackName

  Ipv6Cidr:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  EIGW:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub provider-eigw-{AWS::StackName}

  # For::Each iteration: per subnet type (Workload, Endpoints) and AZ (2 AZs)
  # Resources to create: 4 subnets, 4 route tables, 4 route table associations - obtaining AZ affinity
  'Fn::ForEach::SubnetTypes':
    - SubnetType
    - [Workload, Endpoints]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
          # Subnets
        - '${SubnetType}Subnet${AvailabilityZone}':
            DependsOn:
              - Ipv6Cidr
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref VPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !Select 
                - !FindInMap [SubnetToIndex, !Sub "${SubnetType}${AvailabilityZone}", Index]
                - !Cidr 
                  - !GetAtt VPC.CidrBlock
                  - 256
                  - 8
              Ipv6CidrBlock: !Select 
                - !FindInMap [SubnetToIndex, !Sub "${SubnetType}${AvailabilityZone}", Index]
                - !Cidr 
                  - !Select [0, !GetAtt VPC.Ipv6CidrBlocks]
                  - 256
                  - 64
              AssignIpv6AddressOnCreation: true
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub provider-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Tables
          '${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref VPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub provider-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Table associations
          '${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': '${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}'
  
  # For::Each iteration: per Availability Zone
  # VPC routes to ::/0 via Egress-Only Internet gateway
  'Fn::ForEach::VPCRoutes':
    - AvailabilityZone
    - [a, b]
    - 'DefaultToEIGWRoute${AvailabilityZone}':
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'WorkloadRouteTable${AvailabilityZone}'
          DestinationIpv6CidrBlock: '::/0'
          EgressOnlyInternetGatewayId: !Ref EIGW
      
  # Security Group (Instances)
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance Security Group
      VpcId: !Ref VPC
  
  # For::Each iteration: HTTP (80) & HTTPS (443)
  'Fn::ForEach::IngressSGRule':
    - WebProtocol
    - [HTTP, HTTPS]
    - 'InstanceSecurityGroupIngressIPv4${WebProtocol}':
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
          GroupId: !Ref InstanceSecurityGroup
          Description: Allowing Web Traffic (IPv4)
          IpProtocol: tcp
          FromPort: !FindInMap [Protocol, !Sub "${WebProtocol}", Port]
          ToPort: !FindInMap [Protocol, !Sub "${WebProtocol}", Port]
          SourcePrefixListId: !GetAtt VpcLatticePrefixListIpv4.PrefixListId
      'InstanceSecurityGroupIngressIPv6${WebProtocol}':
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
          GroupId: !Ref InstanceSecurityGroup
          Description: Allowing Web Traffic (IPv6)
          IpProtocol: tcp
          FromPort: !FindInMap [Protocol, !Sub "${WebProtocol}", Port]
          ToPort: !FindInMap [Protocol, !Sub "${WebProtocol}", Port]
          SourcePrefixListId: !GetAtt VpcLatticePrefixListIpv6.PrefixListId
  
  InstanceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      Description: Allowing egress traffic (IPv4)
      IpProtocol: -1
      CidrIp: 0.0.0.0/0
  
  InstanceSecurityGroupEgressIPv6:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      Description: Allowing egress traffic (IPv6)
      IpProtocol: -1
      CidrIpv6: ::/0
  
  # ---------- EC2 INSTANCES ----------
  # For::Each iteration: per AZ (2 AZs)
  'Fn::ForEach::Instances':
    - AvailabilityZone
    - [a, b]
    - 'Instance${AvailabilityZone}':
        Type: AWS::EC2::Instance
        Properties:
          InstanceType: t3.micro
          SecurityGroupIds:
            - !Ref InstanceSecurityGroup
          SubnetId: !Ref 
            'Fn::Sub': 'WorkloadSubnet${AvailabilityZone}'
          ImageId: !Ref LatestAmiId
          Ipv6AddressCount: 1
          Tags:
            - Key: Name
              Value: !Join
                - '-'
                - - !Sub provider-instance-${AvailabilityZone}
                  - !Ref AWS::StackName
          UserData: 
            Fn::Base64: |
              #!/bin/bash
              sudo yum update -y
              sudo yum install -y httpd
              sudo systemctl start httpd
              sudo systemctl enable httpd
              sudo chown -R $USER:$USER /var/www
              sudo echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
  
  # ---------- PRIVATE HOSTED ZONE ----------
  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref HostedZoneName
      VPCs: 
        - VPCId: !Ref VPC
          VPCRegion: !Sub '${AWS::Region}'
  
  VpcLatticeServiceAliasARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Name: !Ref Service2CustomDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt VpcLatticeService2.DnsEntry.DomainName
        HostedZoneId: !GetAtt VpcLatticeService2.DnsEntry.HostedZoneId
        EvaluateTargetHealth: false
  
  VpcLatticeServiceAliasAAAARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Name: !Ref Service2CustomDomainName
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt VpcLatticeService2.DnsEntry.DomainName
        HostedZoneId: !GetAtt VpcLatticeService2.DnsEntry.HostedZoneId
        EvaluateTargetHealth: false

  # ---------- CUSTOM RESOURCE: OBTAIN PREFIX LIST ID FROM NAME ----------
  # VPC Lattice IPv4
  VpcLatticePrefixListIpv4:
    Type: Custom::PrefixListLookup
    Properties:
      ServiceToken: !GetAtt PrefixListLookupFunction.Arn
      PrefixListName: !Sub "com.amazonaws.${AWS::Region}.vpc-lattice" 

  # VPC Lattice IPv6
  VpcLatticePrefixListIpv6:
    Type: Custom::PrefixListLookup
    Properties:
      ServiceToken: !GetAtt PrefixListLookupFunction.Arn
      PrefixListName: !Sub "com.amazonaws.${AWS::Region}.ipv6.vpc-lattice" 
  
  # AWS Lambda function
  PrefixListLookupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.13
      Handler: index.handler
      Role: !GetAtt PrefixListLookupRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):
            if event['RequestType'] in ['Create', 'Update']:
              try:
                ec2 = boto3.client('ec2')
                prefix_list_name = event['ResourceProperties']['PrefixListName']
                
                # Get all managed prefix lists
                response = ec2.describe_managed_prefix_lists(
                  Filters=[{'Name': 'prefix-list-name', 'Values': [prefix_list_name]}]
                )
                
                if response['PrefixLists']:
                  prefix_list_id = response['PrefixLists'][0]['PrefixListId']
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                  {'PrefixListId': prefix_list_id})
                else:
                  cfnresponse.send(event, context, cfnresponse.FAILED, 
                                  {'Error': f'Prefix list {prefix_list_name} not found'})
              except Exception as e:
                cfnresponse.send(event, context, cfnresponse.FAILED, 
                                {'Error': str(e)})
            else:  # Delete
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
    
  # IAM role for the Lambda function
  PrefixListLookupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2PrefixListAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeManagedPrefixLists
                Resource: '*'

  # ---------- CUSTOM RESOURCE: OBTAIN IPV6 ADDRESS FROM EC2 INSTANCES ----------
  EC2IPv6AddressInstancea:
    DependsOn:
      - Instancea
    Type: Custom::EC2IPv6Address
    Properties:
      ServiceToken: !GetAtt EC2IPv6AddressFunction.Arn
      InstanceId: !Ref Instancea
  
  EC2IPv6AddressInstanceb:
    DependsOn:
      - Instanceb
    Type: Custom::EC2IPv6Address
    Properties:
      ServiceToken: !GetAtt EC2IPv6AddressFunction.Arn
      InstanceId: !Ref Instanceb
  
  # Lambda function
  EC2IPv6AddressFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.13
      Handler: index.handler
      Role: !GetAtt EC2IPv6AddressRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):
              if event['RequestType'] in ['Create', 'Update']:
                  try:
                      instance_id = event['ResourceProperties']['InstanceId']
                      
                      # Wait for the instance to be fully initialized
                      ec2 = boto3.client('ec2')
                      
                      # Get instance details
                      max_attempts = 10
                      for attempt in range(max_attempts):
                          response = ec2.describe_instances(InstanceIds=[instance_id])
                          
                          # Check if instance has IPv6 addresses
                          if response['Reservations'] and response['Reservations'][0]['Instances']:
                              instance = response['Reservations'][0]['Instances'][0]
                              
                              # Check network interfaces for IPv6 addresses
                              ipv6_addresses = []
                              for network_interface in instance.get('NetworkInterfaces', []):
                                  for ipv6 in network_interface.get('Ipv6Addresses', []):
                                      ipv6_addresses.append(ipv6.get('Ipv6Address'))
                              
                              if ipv6_addresses:
                                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                                      'IPv6Address': ipv6_addresses[0],
                                      'AllIPv6Addresses': ','.join(ipv6_addresses)
                                  })
                                  return
                          
                          # If we didn't find IPv6 addresses, wait and try again
                          time.sleep(5)
                      
                      # If we get here, we couldn't find IPv6 addresses after all attempts
                      cfnresponse.send(event, context, cfnresponse.FAILED, {
                          'Error': f'Could not retrieve IPv6 address for instance {instance_id} after {max_attempts} attempts'
                      })
                      
                  except Exception as e:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {
                          'Error': str(e)
                      })
              else:  # Delete
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

  # IAM role for the Lambda function
  EC2IPv6AddressRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2DescribeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: '*'

Outputs:
  Service1DomainName:
    Type: String
    Value: !GetAtt VpcLatticeService1.DnsEntry.DomainName

  Service2DomainName:
    Type: String
    Value: !Ref Service2CustomDomainName