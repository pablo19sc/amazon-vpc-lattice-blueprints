AWSTemplateFormatVersion: 2010-09-09
Description: Consumer VPC & EC2 Instances
Transform: 'AWS::LanguageExtensions'

Parameters:
  ServiceNetworkId:
    Type: String
    Description: VPC Lattice service network ID.
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

Mappings:
  SubnetToIndex:
    Workloada:
      Index: 0
    Workloadb:
      Index: 1
    Endpointsa:
      Index: 2
    Endpointsb:
      Index: 3

Resources:
  # ---------- VPC ----------
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - consumer-vpc
              - !Ref AWS::StackName

  Ipv6Cidr:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  # For::Each iteration: per subnet type (Workload, Endpoints) and AZ (2 AZs)
  # Resources to create: 4 subnets, 4 route tables, 4 route table associations - obtaining AZ affinity
  'Fn::ForEach::SubnetTypes':
    - SubnetType
    - [Workload, Endpoints]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
          # Subnets
        - '${SubnetType}Subnet${AvailabilityZone}':
            DependsOn:
              - Ipv6Cidr
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref VPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !Select 
                - !FindInMap [SubnetToIndex, !Sub "${SubnetType}${AvailabilityZone}", Index]
                - !Cidr 
                  - !GetAtt VPC.CidrBlock
                  - 256
                  - 8
              Ipv6CidrBlock: !Select 
                - !FindInMap [SubnetToIndex, !Sub "${SubnetType}${AvailabilityZone}", Index]
                - !Cidr 
                  - !Select [0, !GetAtt VPC.Ipv6CidrBlocks]
                  - 256
                  - 64
              AssignIpv6AddressOnCreation: true
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub consumer-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Tables
          '${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref VPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub consumer-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Table associations
          '${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': '${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}'
  
  # Security Group (Instances)
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance Security Group
      VpcId: !Ref VPC
  
  InstanceSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref EndpointSecurityGroup
  
  InstanceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      Description: Allowing egress traffic (IPv4)
      IpProtocol: -1
      CidrIp: 0.0.0.0/0
  
  InstanceSecurityGroupEgressIPv6:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      Description: Allowing egress traffic (IPv6)
      IpProtocol: -1
      CidrIpv6: ::/0

  # Security Group (EC2 Instance Connect endpoint)
  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Endpoints Security Group
      VpcId: !Ref VPC
  
  EndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EndpointSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref InstanceSecurityGroup
  
  # Security Group (VPC Lattice VPC association)
  VpcLatticeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC Lattice VPC association Security Group
      VpcId: !Ref VPC
  
  VpcLatticeSecurityGroupIngressInstanceHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VpcLatticeSecurityGroup
      Description: Allowing HTTPS traffic
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
  
  # ---------- VPC LATTICE SERVICE NETWORK VPC ASSOCATION ----------
  ServiceNetworkVpcAssociation:
    Type: AWS::VpcLattice::ServiceNetworkVpcAssociation
    Properties:
      ServiceNetworkIdentifier: !Ref ServiceNetworkId
      VpcIdentifier: !Ref VPC
      SecurityGroupIds: 
        - !Ref VpcLatticeSecurityGroup

  # ---------- EC2 INSTANCES ----------
  # For::Each iteration: per AZ (2 AZs)
  'Fn::ForEach::Instances':
    - AvailabilityZone
    - [a, b]
    - 'Instance${AvailabilityZone}':
        Type: AWS::EC2::Instance
        Properties:
          InstanceType: t3.micro
          SecurityGroupIds:
            - !Ref InstanceSecurityGroup
          SubnetId: !Ref 
            'Fn::Sub': 'WorkloadSubnet${AvailabilityZone}'
          ImageId: !Ref LatestAmiId
          Ipv6AddressCount: 1
          Tags:
            - Key: Name
              Value: !Join
                - '-'
                - - !Sub consumer-instance-${AvailabilityZone}
                  - !Ref AWS::StackName
  
  # ---------- EC2 INSTANCE CONNECT ENDPOINT ----------
  EICEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: false
      SecurityGroupIds: 
        - !Ref EndpointSecurityGroup
      SubnetId: !Ref EndpointsSubneta
      Tags: 
        - Key: Name
          Value : !Join
            - '-'
            - - !Sub consumer-eic
              - !Ref AWS::StackName
